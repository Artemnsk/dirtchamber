{"version":3,"sources":["../src/js/food.js","../src/js/god.js","../src/js/env.js","../src/js/game.js","../src/js/message.js","../src/js/microbe.js","../src/js/player.js"],"names":["noReproduction","reproduceAndPlaceNearRandomly","Math","random","possiblePlacements","vars","x","y","this","env","microbes","length","configs","maxX","maxY","push","choosenPlacement","randomNumberFromRange","food","Food","type","reproduceUderYouself","min","max","floor","Environment","current_step","microbes_to_reproduce","messages","i","minX","j","minY","c","document","getElementById","ctx","getContext","canvas","height","draw_scale","width","prototype","draw","scale","clearRect","fillStyle","player","color","fillRect","step","prepareEnvironmentInfo","index","live","microbe","indexOf","splice","reproduce","console","log","processLayerItem","item","players_and_hitpoints","getOverallHitpointsByPlayer","players","hitpoints","max_hitpoints_index","winner","round","hitpoints_per_food","getMessages","response","message_radius","k","message","Message","giveEnvironmentInfo","hitpoints_by_player","player_index","getMicrobesQuantityByPlayer","q","strategy","text","JSON","stringify","Game","game_configs","env_configs","status","settle","randomSettle","call","processEnd","endGame","only_one_player_left","current_player","max_steps","nickname","$","html","coords","microbes_starting_population","p","Microbe","f","food_starting_population","startGame","algorithm1","Function","val","algorithm2","player1","Player","player2","population_limit","game","setInterval","my_x","my_y","my_hitpoints","microbe_move","microbe_reproduce","microbe_yell","microbe_set_inner_info","found_food","data","parse","e","move_x","move_y","inner_info","speed","undefined","that","already_moved","move","already_reproduce_requested","microbe_reproduce_request","reproduce_request","already_yelled","yell","setInnerInfo","algorithm","isNumeric","abs","sign","my_inner_info"],"mappings":"AA6CA,QAASA,mBAOT,QAASC,iCACL,GAAIC,KAAKC,UAAY,KAAwC,CACzD,GAAIC,MACAC,IAAQ,EAAI,EAAG,EACnB,KAAK,GAAIC,KAAKD,GACnB,IAAK,GAAIE,KAAKF,GACW,IAANC,GAAiB,IAANC,GAGwC,IAAjDC,KAAKC,IAAIA,IAAID,KAAKF,GAAGE,KAAKD,GAAGG,SAASC,QACjCH,KAAKF,EAAID,EAAKC,IAAM,GAAKE,KAAKF,EAAID,EAAKC,GAAKE,KAAKC,IAAIG,QAAQC,MAC7DL,KAAKD,EAAIF,EAAKE,IAAM,GAAKC,KAAKD,EAAIF,EAAKE,GAAKC,KAAKC,IAAIG,QAAQE,MAC9DV,EAAmBW,MACfT,EAAGE,KAAKF,EAAID,EAAKC,GACjBC,EAAGC,KAAKD,EAAIF,EAAKE,IAOzC,IAAGH,EAAmBO,OAAS,EAAE,CAC/B,GAAIK,GAAmBZ,EAAmBa,sBAAsB,EAAGb,EAAmBO,OAAS,IAE3FO,EAAO,GAAIC,MAAKH,EAAiBV,EAAGU,EAAiBT,EAAGC,KAAKC,KAC7DW,KAAM,UAEVZ,MAAKC,IAAIA,IAAIO,EAAiBV,GAAGU,EAAiBT,GAAGW,KAAKH,KAAKG,GAC/DV,KAAKC,IAAIS,KAAKH,KAAKG,KAK7B,QAASG,wBACL,GAAInB,KAAKC,UAAY,KAAwC,CACzD,GAAIG,GAAIE,KAAKF,EACTC,EAAIC,KAAKD,EAETW,EAAO,GAAIC,MAAKb,EAAGC,EAAGC,KAAKC,KAC3BW,KAAM,UAEVZ,MAAKC,IAAIA,IAAIH,GAAGC,GAAGW,KAAKH,KAAKG,GAC7BV,KAAKC,IAAIS,KAAKH,KAAKG,ICxF3B,QAASD,uBAAsBK,EAAIC,GAC/B,MAAOrB,MAAKsB,MAAMtB,KAAKC,UAAUoB,EAAID,GAAKA,GCQ9C,GAAIG,aAAc,SAAUb,GAUxB,IATAJ,KAAKI,QAAUA,EACfJ,KAAKkB,aAAe,EAEpBlB,KAAKmB,yBAELnB,KAAKE,YACLF,KAAKoB,YACLpB,KAAKU,QACLV,KAAKC,OACAoB,EAAIrB,KAAKI,QAAQkB,KAAMD,GAAKrB,KAAKI,QAAQC,KAAMgB,IAEhD,IADArB,KAAKC,IAAIoB,MACJE,EAAIvB,KAAKI,QAAQoB,KAAMD,GAAKvB,KAAKI,QAAQE,KAAMiB,IAChDvB,KAAKC,IAAIoB,GAAGE,IACRrB,YACAkB,YACAV,QAKZ,IAAIe,GAAIC,SAASC,eAAe,QAC5BC,EAAMH,EAAEI,WAAW,KACvBD,GAAIE,OAAOC,QAAU/B,KAAKI,QAAQE,KAAON,KAAKI,QAAQoB,MAAMxB,KAAKI,QAAQ4B,WACzEJ,EAAIE,OAAOG,OAASjC,KAAKI,QAAQC,KAAOL,KAAKI,QAAQkB,MAAMtB,KAAKI,QAAQ4B,WAM5Ef,aAAYiB,UAAUC,KAAO,WACzB,GAAIV,GAAIC,SAASC,eAAe,QAC5BC,EAAMH,EAAEI,WAAW,MAEnBO,EAAQpC,KAAKI,QAAQ4B,UACzBJ,GAAIS,UAAU,EAAG,EAAGrC,KAAKI,QAAQC,KAAO+B,EAAOpC,KAAKI,QAAQE,KAAO8B,EACnE,KAAK,GAAItC,KAAKE,MAAKC,IACf,IAAK,GAAIF,KAAKC,MAAKC,IAAIH,GACfE,KAAKC,IAAIH,GAAGC,GAAGG,SAASC,OAAS,IACjCyB,EAAIU,UAAYtC,KAAKC,IAAIH,GAAGC,GAAGG,SAAS,GAAGqC,OAAOC,MAClDZ,EAAIa,SAAS3C,EAAIsC,EAAOrC,EAAIqC,EAAOA,EAAOA,IAE1CpC,KAAKC,IAAIH,GAAGC,GAAGW,KAAKP,OAAS,IAC7ByB,EAAIU,UAAY,QAChBV,EAAIa,SAAS3C,EAAIsC,EAAOrC,EAAIqC,EAAOA,EAAOA,KAS1DnB,YAAYiB,UAAUQ,KAAO,WAEzB1C,KAAK2C,yBAEL3C,KAAKkB,cACL,KAAK,GAAI0B,KAAS5C,MAAKE,SACnBF,KAAKE,SAAS0C,GAAOC,MAEzB,KAAK,GAAID,KAAS5C,MAAKU,KACnBV,KAAKU,KAAKkC,GAAOC,MAGrB,MAAO7C,KAAKmB,sBAAsBhB,OAAS,GAAG,CAC1C,GAAI2C,GAAU9C,KAAKmB,sBAAsB,GACrCyB,EAAQ5C,KAAKE,SAAS6C,QAAQD,EAClC9C,MAAKmB,sBAAsB6B,OAAO,EAAG,GAGjCJ,KAAU,EACV5C,KAAKE,SAAS0C,GAAOK,YAErBC,QAAQC,IAAI,4DAIpB,IAAK,GAAI9B,KAAKrB,MAAKC,IACf,IAAK,GAAIsB,KAAKvB,MAAKC,IAAIoB,GAEnBrB,KAAKoD,iBAAiBpD,KAAKC,IAAIoB,GAAGE,GAK1C,KADA,GAAIF,GAAI,EACDA,EAAIrB,KAAKoB,SAASjB,QACrB,GAAIH,KAAKoB,SAASC,GAAGqB,KAAO1C,KAAKkB,aAAc,CAC3C,GAAI0B,GAAQ5C,KAAKC,IAAID,KAAKoB,SAASC,GAAGvB,GAAGE,KAAKoB,SAASC,GAAGtB,GAAGqB,SAAS2B,QAAQ/C,KAAKoB,SAASC,GAC5FrB,MAAKC,IAAID,KAAKoB,SAASC,GAAGvB,GAAGE,KAAKoB,SAASC,GAAGtB,GAAGqB,SAAS4B,OAAOJ,EAAO,GACxE5C,KAAKoB,SAAS4B,OAAO3B,EAAG,OAGxBA,MAQZJ,YAAYiB,UAAUkB,iBAAmB,SAASC,GAE9C,GAAIA,EAAKnD,SAASC,OAAS,EAAG,CAC1B,GAAImD,GAAwBtD,KAAKuD,4BAA4BF,EAAKnD,UAC9DsD,EAAUF,EAAsBE,QAChCC,EAAYH,EAAsBG,SAEtC,IAAID,EAAQrD,OAAS,EAAG,CAGpB,IAAK,GADDuD,GAAsB,EACjBrC,EAAI,EAAGA,EAAIoC,EAAUtD,OAAQkB,IAC9BoC,EAAUpC,GAAKoC,EAAUC,KACzBA,EAAsBrC,EAK9B,KAAK,GAFDsC,GAASH,EAAQE,GAEZrC,EAAI,EAAGA,EAAIgC,EAAKnD,SAASC,OAAQkB,IAClCgC,EAAKnD,SAASmB,GAAGkB,SAAWoB,IAE5BN,EAAKnD,SAASmB,GAAGoC,UAAY,IAO7C,IADA,GAAIpC,GAAI,EACDA,EAAIgC,EAAKnD,SAASC,QAGrB,GADAkD,EAAKnD,SAASmB,GAAGoC,WAAa,GAC1BJ,EAAKnD,SAASmB,GAAGoC,WAAa,EAAG,CACjC,GAAIb,GAAQ5C,KAAKE,SAAS6C,QAAQM,EAAKnD,SAASmB,GAChDrB,MAAKE,SAAS8C,OAAOJ,EAAO,GAC5BS,EAAKnD,SAAS8C,OAAO3B,EAAG,OAGxBA,IAKR,IAAIgC,EAAK3C,KAAKP,OAAS,GAAKkD,EAAKnD,SAASC,OAAS,EAE/C,IAAK,GAAIkB,GAAI,EAAGA,EAAIgC,EAAKnD,SAASC,OAAQkB,IACtC,IAAK,GAAIE,GAAI,EAAGA,EAAI8B,EAAK3C,KAAKP,OAAQoB,IAC9B8B,EAAK3C,KAAKa,GAAGQ,QAAU,IAKvBsB,EAAK3C,KAAKa,GAAGQ,SACbsB,EAAKnD,SAASmB,GAAGoC,WAAa/D,KAAKkE,MAAM5D,KAAKI,QAAQyD,oBAOtE,KADA,GAAIxC,GAAI,EACDA,EAAIgC,EAAK3C,KAAKP,QACjB,GAAIkD,EAAK3C,KAAKW,GAAGU,QAAU,EAAG,CAC1B,GAAIa,GAAQ5C,KAAKU,KAAKqC,QAAQM,EAAK3C,KAAKW,GACxCrB,MAAKU,KAAKsC,OAAOJ,EAAO,GACxBS,EAAK3C,KAAKsC,OAAO3B,EAAG,OAGpBA,MAUZJ,YAAYiB,UAAU4B,YAAc,SAAUhE,EAAGC,GAE7C,IAAK,GADDgE,MACK1C,EAAIvB,EAAIE,KAAKI,QAAQ4D,eAAgB3C,GAAKvB,EAAIE,KAAKI,QAAQ4D,eAAgB3C,IAChF,GAAKrB,KAAKI,QAAQkB,MAAQD,GAAOA,GAAKrB,KAAKI,QAAQC,KAC/C,IAAK,GAAIkB,GAAIxB,EAAIC,KAAKI,QAAQ4D,eAAgBzC,GAAKxB,EAAIC,KAAKI,QAAQ4D,eAAgBzC,IAChF,GAAKvB,KAAKI,QAAQoB,MAAQD,GAAOA,GAAKvB,KAAKI,QAAQE,KAC/C,IAAK,GAAIsC,GAAQ,EAAGA,EAAQ5C,KAAKC,IAAIoB,GAAGE,GAAGH,SAASjB,OAAQyC,IAEpD5C,KAAKC,IAAIoB,GAAGE,GAAGH,SAASwB,GAAOF,KAAO1C,KAAKkB,cACvC6C,EAAShB,QAAQ/C,KAAKC,IAAIoB,GAAGE,GAAGH,SAASwB,OAAY,GACrDmB,EAASxD,KAAKP,KAAKC,IAAIoB,GAAGE,GAAGH,SAASwB,GAQlE,OAAOmB,IAMX9C,YAAYiB,UAAUS,uBAAyB,WAC3C,IAAK,GAAItB,GAAIrB,KAAKI,QAAQkB,KAAMD,GAAKrB,KAAKI,QAAQC,KAAMgB,IACpD,IAAK,GAAIE,GAAIvB,KAAKI,QAAQoB,KAAMD,GAAKvB,KAAKI,QAAQE,KAAMiB,IAAK,CAEzD,IAAK,GAAI0C,GAAI,EAAGA,EAAIjE,KAAKC,IAAIoB,GAAGE,GAAGrB,SAASC,OAAQ8D,IAAK,CACrD,GAAIC,GAAU,GAAIC,SAAQnE,KAAKC,IAAIoB,GAAGE,GAAGrB,SAAS+D,GAAGG,sBAAuB/C,EAAGE,EAAGvB,KAAM,KACxFA,MAAKoB,SAASb,KAAK2D,GACnBlE,KAAKC,IAAIoB,GAAGE,GAAGH,SAASb,KAAK2D,GAGjC,IAAK,GAAID,GAAI,EAAGA,EAAIjE,KAAKC,IAAIoB,GAAGE,GAAGb,KAAKP,OAAQ8D,IAAK,CACjD,GAAIC,GAAU,GAAIC,SAAQnE,KAAKC,IAAIoB,GAAGE,GAAGb,KAAKuD,GAAGG,sBAAuB/C,EAAGE,EAAGvB,KAAM,KACpFA,MAAKoB,SAASb,KAAK2D,GACnBlE,KAAKC,IAAIoB,GAAGE,GAAGH,SAASb,KAAK2D,MAgB7CjD,YAAYiB,UAAUqB,4BAA8B,SAAUrD,GAG1D,IAAK,GAFDsD,MACAa,KACKhD,EAAI,EAAGA,EAAInB,EAASC,OAAQkB,IAAK,CACtC,GAAIiD,GAAed,EAAQT,QAAQ7C,EAASmB,GAAGkB,OAE3C+B,MAAiB,IACjBd,EAAQjD,KAAKL,EAASmB,GAAGkB,QACzB+B,EAAed,EAAQrD,OAAS,EAEhCkE,EAAoBC,GAAgB,GAExCD,EAAoBC,IAAiBpE,EAASmB,GAAGoC,UAErD,OACID,QAAWA,EACXC,UAAaY,IAOrBpD,YAAYiB,UAAUqC,4BAA8B,SAAUhC,EAAQrC,GAElE,IAAK,GADDsE,GAAI,EACCnD,EAAI,EAAGA,EAAInB,EAASC,OAAQkB,IAC7BnB,EAASmB,GAAGkB,SAAWA,GACvBiC,GAGR,OAAOA,GF3QX,IAAI7D,MAAO,SAASb,EAAGC,EAAGE,EAAKwE,GAC3BzE,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EACTC,KAAKC,IAAMA,EACXD,KAAK+B,OAAS,GACd/B,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EACTC,KAAKC,IAAIA,IAAID,KAAKF,GAAGE,KAAKD,GAAGW,KAAKH,KAAKP,MACvCA,KAAKC,IAAIS,KAAKH,KAAKP,MAMvBW,MAAKuB,UAAUW,KAAO,WAClB7C,KAAKiD,aAMTtC,KAAKuB,UAAUkC,oBAAsB,WACjC,GAAIM,IACA5E,EAAKE,KAAKF,EACVC,EAAKC,KAAKD,EACVa,KAAQ,OACRmB,OAAU/B,KAAK+B,OAEnB,OAAO4C,MAAKC,UAAUF,IAG1B/D,KAAKuB,UAAUe,UAAYzD,cG1B3B,IAAIqF,MAAO,SAAUrB,EAASsB,EAAcC,GACxC/E,KAAKI,QAAU0E,EACf9E,KAAKC,IAAM,GAAIgB,aAAY8D,GAC3B/E,KAAKwD,QAAUA,EACfxD,KAAKgF,OAAS,UACdhF,KAAK2D,OAAS,KAMlBkB,MAAK3C,UAAU+C,OAAS,WACpBC,aAAaC,KAAKnF,OAOtB6E,KAAK3C,UAAUkD,WAAa,WACxB,GAAoB,YAAhBpF,KAAKgF,OACL,OAAO,CAEX,IAAoB,UAAhBhF,KAAKgF,OAGL,MAFAhF,MAAKqF,UACLrF,KAAKgF,OAAS,WACP,CAGX,IAAiC,IAA7BhF,KAAKC,IAAIC,SAASC,OAGlB,MAFAH,MAAK2D,OAAS,KACd3D,KAAKgF,OAAS,SACP,CAKX,KAAK,GAFDM,IAAuB,EACvBC,EAAiB,KACZlE,EAAI,EAAGA,EAAIrB,KAAKC,IAAIC,SAASC,OAAQkB,IAO1C,GALuB,OAAnBkE,IACAA,EAAiBvF,KAAKC,IAAIC,SAASmB,GAAGkB,QAItCgD,IAAmBvF,KAAKC,IAAIC,SAASmB,GAAGkB,OAAQ,CAChD+C,GAAuB,CACvB,OAGR,GAAIA,EAGA,MAFAtF,MAAK2D,OAAS3D,KAAKC,IAAIC,SAAS,GAAGqC,OACnCvC,KAAKgF,OAAS,SACP,CAGX,IAAIhF,KAAKC,IAAIiB,cAAgBlB,KAAKI,QAAQoF,UAAW,CAEjD,GAAIlC,GAAwBtD,KAAKuD,4BAA4BvD,KAAKC,IAAIC,UAClEsD,EAAUF,EAAsBE,QAChCC,EAAYH,EAAsBG,SAEtC,IAAID,EAAQrD,OAAS,EAAG,CAGpB,IAAK,GADDuD,GAAsB,EACjBrC,EAAI,EAAGA,EAAIoC,EAAUtD,OAAQkB,IAC9BoC,EAAUpC,GAAKoC,EAAUC,KACzBA,EAAsBrC,EAK9B,OAFArB,MAAK2D,OAASH,EAAQE,GACtB1D,KAAKgF,OAAS,SACP,KAQnBH,KAAK3C,UAAUmD,QAAU,WACrB,GAAIX,GAAO,EAEPA,GADgB,OAAhB1E,KAAK2D,OACE3D,KAAK2D,OAAO8B,SAAW,SAEvB,wBAEXC,EAAE,WAAWC,KAAKjB,GAWtB,IAAIQ,cAAe,WAGf,GAAIU,KACJ,QAAQ5F,KAAKwD,QAAQrD,QACjB,QACA,IAAK,GACDyF,IAEQ9F,EAAKE,KAAKC,IAAIG,QAAQkB,KACtBvB,EAAKL,KAAKkE,MAAM5D,KAAKC,IAAIG,QAAQE,KAAK,KAEtCR,EAAKE,KAAKC,IAAIG,QAAQC,KACtBN,EAAKL,KAAKkE,MAAM5D,KAAKC,IAAIG,QAAQE,KAAK,KAKtD,IAAK,GAAIe,GAAI,EAAGA,EAAIrB,KAAKI,QAAQyF,6BAA8BxE,IAAK,CAChE,IAAK,GAAIyE,GAAI,EAAGA,EAAI9F,KAAKwD,QAAQrD,OAAQ2F,IACrC,GAAIC,SAAQH,EAAOE,GAAGhG,EAAG8F,EAAOE,GAAG/F,EAAGC,KAAKC,IAAK,QAASD,KAAKwD,QAAQsC,GAAI,GAE9E,KAAK,GAAIE,GAAI,EAAGA,EAAIhG,KAAKI,QAAQ6F,yBAA0BD,IAAK,CAG5D,GAAIrF,MAFIF,sBAAsBT,KAAKC,IAAIG,QAAQkB,KAAMtB,KAAKC,IAAIG,QAAQC,MAC9DI,sBAAsBT,KAAKC,IAAIG,QAAQoB,KAAMxB,KAAKC,IAAIG,QAAQE,MACvDN,KAAKC,QF5H5BiG,UAAY,WACZC,WAAa,GAAIC,UAAS,WAAY,OAAQ,OAAQ,eAAgB,gBAAiB,eAAgB,oBAAqB,eAAgB,yBAA0BV,EAAE,gCAAgCW,OACxMC,WAAa,GAAIF,UAAS,WAAY,OAAQ,OAAQ,eAAgB,gBAAiB,eAAgB,oBAAqB,eAAgB,yBAA0BV,EAAE,gCAAgCW,MACxM,IAAIE,GAAU,GAAIC,QAAOd,EAAE,+BAA+BW,MAAOX,EAAE,4BAA4BW,MAAOF,YAClGM,EAAU,GAAID,QAAOd,EAAE,+BAA+BW,MAAOX,EAAE,4BAA4BW,MAAOC,YAClG9C,GAAW+C,EAASE,GACpB3B,GACAU,UAAa,WACbK,6BAAgC,EAChCI,yBAA4B,KAE5BlB,GACA1E,KAAQ,IACRC,KAAQ,IACRgB,KAAQ,EACRE,KAAQ,EACRkF,iBAAoB,IACpB1E,WAAc,EACd6B,mBAAsB,IACtBG,eAAkB,GAElB2C,EAAO,GAAI9B,MAAKrB,EAASsB,EAAcC,EAC3C4B,GAAK1B,SACL2B,YAAY,WACHD,EAAKvB,eAENuB,EAAK1G,IAAIyC,OACTiE,EAAK1G,IAAIkC,SAEd,KAQHgE,WAAa,SAAU/E,EAAUyF,EAAMC,EAAMC,EAAcC,EAAcC,EAAmBC,EAAcC,GAG1G,IAAK,GADDC,IAAa,EACR/F,EAAI,EAAGA,EAAID,EAASjB,OAAQkB,IACjC,IACI,GAAIgG,GAAO1C,KAAK2C,MAAMlG,EAASC,GAAGqD,KAClC,IAAkB,SAAd2C,EAAKzG,KAAiB,CAEtBoG,EAAaK,EAAKvH,EAAI+G,EAAMQ,EAAKtH,EAAI+G,GACrCM,GAAa,CACb,QAEN,MAAOG,IAEb,IAAKH,EAAY,CACb,GAAII,GAAS/G,uBAAsB,EAAI,GACnCgH,EAAShH,uBAAsB,EAAI,EACvCuG,GAAaQ,EAAQC,GACrBT,EAAaQ,EAAQC,GAErB/H,KAAKC,UAAY,MACjBsH,KAKJX,WAAa,SAAUlF,EAAUyF,EAAMC,EAAMC,EAAcC,EAAcC,EAAmBC,EAAcC,GAG1GH,EAFavG,uBAAsB,EAAI,GAC1BA,uBAAsB,EAAI,IAEnCf,KAAKC,UAAY,MACjBsH,KGvEJ9C,QAAU,SAAUO,EAAM5E,EAAGC,EAAGE,EAAKsC,GAErCvC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EAETC,KAAKuC,OAASA,EACdvC,KAAK0C,KAAOzC,EAAIiB,aAChBlB,KAAK0E,KAAOA,GCPZqB,QAAU,SAAUjG,EAAGC,EAAGE,EAAKwD,EAAWlB,EAAQmF,GAClD1H,KAAKuC,OAASA,EACdvC,KAAKC,IAAMA,EACXD,KAAK2H,MAAQ,EACb3H,KAAKyD,UAAYA,EACjBzD,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EACTC,KAAKC,IAAIC,SAASK,KAAKP,MACvBA,KAAKC,IAAIA,IAAID,KAAKF,GAAGE,KAAKD,GAAGG,SAASK,KAAKP,MACxB4H,SAAfF,IACAA,EAAa,IAEjB1H,KAAK0H,WAAaA,EAMtB3B,SAAQ7D,UAAUW,KAAO,WACrB,GAAI7C,KAAKuC,QAAUvC,KAAKuC,iBAAkBiE,QAAQ,CAC9C,GAAIqB,GAAO7H,KAEP8H,GAAgB,EAChBd,EAAe,SAAUQ,EAAQC,GAC7BK,KAAkB,IAClBA,GAAgB,EAChBD,EAAKE,KAAKP,EAAQC,KAKtBO,GAA8B,EAC9BC,EAA4B,WACxBD,KAAgC,IAChCA,GAA8B,EAC9BH,EAAKK,sBAKTC,GAAiB,EACjBjB,EAAe,SAAUxC,GACrByD,KAAmB,IACnBA,GAAiB,EACjBN,EAAKO,KAAK1D,KAMdyC,EAAyB,SAAUO,GACnCG,EAAKQ,aAAaX,IAGlBtG,EAAWpB,KAAKC,IAAI6D,YAAY9D,KAAKF,EAAGE,KAAKD,EACjDC,MAAKuC,OAAO+F,UAAUnD,KAAK,KAAM/D,EAAUpB,KAAKF,EAAGE,KAAKD,EAAGC,KAAKyD,UAAWzD,KAAK0H,WAAYV,EAAciB,EAA2Bf,EAAcC,KAO3JpB,QAAQ7D,UAAU6F,KAAO,SAASP,EAAQC,GAYtC,GAVK/B,EAAE6C,UAAUf,KACbA,EAAS,GAER9B,EAAE6C,UAAUd,KACbA,EAAS,GAGbD,EAAS9H,KAAKkE,MAAM4D,GACpBC,EAAS/H,KAAKkE,MAAM6D,GAEL,IAAXD,GAA2B,IAAXC,EAApB,CAII/H,KAAK8I,IAAIhB,GAAU,IACnBA,EAAS9H,KAAK+I,KAAKjB,IAEnB9H,KAAK8I,IAAIf,GAAU,IACnBA,EAAS/H,KAAK+I,KAAKhB,GAGvB,IAAI7E,GAAQ5C,KAAKC,IAAIA,IAAID,KAAKF,GAAGE,KAAKD,GAAGG,SAAS6C,QAAQ/C,KAC1DA,MAAKC,IAAIA,IAAID,KAAKF,GAAGE,KAAKD,GAAGG,SAAS8C,OAAOJ,EAAO,GAGpD5C,KAAKF,GAAKE,KAAK2H,MAAQH,EACvBxH,KAAKD,GAAKC,KAAK2H,MAAQF,EAEnBzH,KAAKF,EAAIE,KAAKC,IAAIG,QAAQkB,KAC1BtB,KAAKF,EAAIE,KAAKC,IAAIG,QAAQkB,KAErBtB,KAAKF,GAAKE,KAAKC,IAAIG,QAAQC,OAChCL,KAAKF,EAAIE,KAAKC,IAAIG,QAAQC,KAAO,GAEjCL,KAAKD,EAAIC,KAAKC,IAAIG,QAAQoB,KAC1BxB,KAAKD,EAAIC,KAAKC,IAAIG,QAAQoB,KAErBxB,KAAKD,GAAKC,KAAKC,IAAIG,QAAQE,OAChCN,KAAKD,EAAIC,KAAKC,IAAIG,QAAQE,KAAO,GAIrCN,KAAKC,IAAIA,IAAID,KAAKF,GAAGE,KAAKD,GAAGG,SAASK,KAAKP,QAO/C+F,QAAQ7D,UAAUgG,kBAAoB,WAC9BlI,KAAKC,IAAIkB,sBAAsB4B,QAAQ/C,SAAU,GACjDA,KAAKC,IAAIkB,sBAAsBZ,KAAKP,OAO5C+F,QAAQ7D,UAAUe,UAAY,WACtBjD,KAAKC,IAAIsE,4BAA4BvE,KAAKuC,OAAQvC,KAAKC,IAAIC,WAAaF,KAAKC,IAAIG,QAAQsG,mBACzF1G,KAAKyD,UAAY/D,KAAKkE,MAAM5D,KAAKyD,UAAY,GAC7C,GAAIsC,SAAQ/F,KAAKF,EAAGE,KAAKD,EAAGC,KAAKC,IAAKD,KAAKyD,UAAWzD,KAAKuC,OAAQ,MAO3EwD,QAAQ7D,UAAUkG,KAAO,SAAS1D,GAE9B,GAAIR,GAAU,GAAIC,SAAQO,EAAM1E,KAAKF,EAAGE,KAAKD,EAAGC,KAAKC,IAAKD,KAAKuC,OAC/DvC,MAAKC,IAAImB,SAASb,KAAK2D,GACvBlE,KAAKC,IAAIA,IAAID,KAAKF,GAAGE,KAAKD,GAAGqB,SAASb,KAAK2D,IAM/C6B,QAAQ7D,UAAUkC,oBAAsB,WACpC,GAAIM,IACA5E,EAAKE,KAAKF,EACVC,EAAKC,KAAKD,EACVwC,OAAUvC,KAAKuC,OAAOkD,SACtB7E,KAAQ,UACR6C,UAAazD,KAAKyD,UAClBiE,WAAc1H,KAAK0H,WAEvB,OAAO/C,MAAKC,UAAUF,IAM1BqB,QAAQ7D,UAAUmG,aAAe,SAASX,GACtC1H,KAAK0H,WAAaA,EC/JtB,IAAIlB,QAAS,SAAUf,EAAUjD,EAAO8F,GACpCtI,KAAKyF,SAAWA,EAChBzF,KAAKwC,MAAQA,CACb,IAAIqF,GAAO7H,IAEXA,MAAKsI,UAAYA,GAAa,SAAUlH,EAAUyF,EAAMC,EAAMC,EAAc2B,EAAe1B,EAAcC,EAAmBC,EAAcC,GAGtI,IAAK,GADDC,IAAa,EACR/F,EAAI,EAAGA,EAAID,EAASjB,OAAQkB,IACjC,IACI,GAAIgG,GAAO1C,KAAK2C,MAAMlG,EAASC,GAAGqD,KAClC,IAAkB,SAAd2C,EAAKzG,KAAiB,CAEtBoG,EAAaK,EAAKvH,EAAI+G,EAAMQ,EAAKtH,EAAI+G,GACrCM,GAAa,CACb,QAEN,MAAOG,IAEb,IAAKH,EAAY,CAGbJ,EAFavG,uBAAsB,EAAI,GAC1BA,uBAAsB,EAAI,IAI3CwG,IACAC,EAAaW,EAAKpC","file":"app.min.js","sourcesContent":["/**\r\n * Food constructor.\r\n * @param x\r\n * @param y\r\n * @param env\r\n * @constructor\r\n */\r\nvar Food = function(x, y, env, strategy) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.env = env;\r\n    this.height = 10;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.env.env[this.x][this.y].food.push(this);\r\n    this.env.food.push(this);\r\n};\r\n\r\n/**\r\n * Main food method which calculates a step of Food's life.\r\n */\r\nFood.prototype.live = function() {\r\n    this.reproduce();\r\n};\r\n\r\n/**\r\n * Provide environment with info about this object.\r\n */\r\nFood.prototype.giveEnvironmentInfo = function() {\r\n    var text = {\r\n        'x': this.x,\r\n        'y': this.y,\r\n        'type': 'food',\r\n        'height': this.height\r\n    };\r\n    return JSON.stringify(text);\r\n};\r\n\r\nFood.prototype.reproduce = noReproduction;\r\n\r\n//======== Reproduction strateges =========\r\n\r\n/**\r\n * No reproduction.\r\n */\r\nfunction noReproduction() {\r\n\r\n}\r\n\r\n/**\r\n * Food creates a new one near itself.\r\n */\r\nfunction reproduceAndPlaceNearRandomly() {\r\n    if (Math.random() <= 0.005/*FOOD_REPRODUCTION_PROBABILITY*/) {\r\n        var possiblePlacements = [];\r\n        var vars = [-1, 0, 1];\r\n        for (var x in vars) {\r\n\t\t\tfor (var y in vars) {\r\n                if (!(x === 1 && y === 1)) {\r\n                    //if ( x != 1 && y != 1) - try it - it's funny!\r\n                    // checking if that cell is null (or undefined). Should we check if it is empty?\r\n                    if (this.env.env[this.x][this.y].microbes.length === 0) {\r\n                        if ((this.x + vars[x] >= 0 && this.x + vars[x] < this.env.configs.maxX) &&\r\n                            (this.y + vars[y] >= 0 && this.y + vars[y] < this.env.configs.maxY)) {\r\n                            possiblePlacements.push({\r\n                                x: this.x + vars[x],\r\n                                y: this.y + vars[y]\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\t\t}\r\n        if(possiblePlacements.length > 0){\r\n          var choosenPlacement = possiblePlacements[randomNumberFromRange(0, possiblePlacements.length - 1)];\r\n\r\n          var food = new Food(choosenPlacement.x, choosenPlacement.y, this.env, {\r\n              type: 'direct'\r\n          });\r\n          this.env.env[choosenPlacement.x][choosenPlacement.y].food.push(food);\r\n          this.env.food.push(food);\r\n      }\r\n    }\r\n}\r\n\r\nfunction reproduceUderYouself () {\r\n    if (Math.random() <= 0.005/*FOOD_REPRODUCTION_PROBABILITY*/) {\r\n        var x = this.x,\r\n            y = this.y;\r\n\r\n        var food = new Food(x, y, this.env, {\r\n            type: 'direct'\r\n        });\r\n        this.env.env[x][y].food.push(food);\r\n        this.env.food.push(food);\r\n    }\r\n}\r\n","/**\n * Helper function which returns random number from range.\n * @param min\n * @param max\n * @returns {number}\n */\nfunction randomNumberFromRange(min,max){\n    return Math.floor(Math.random()*(max-min)+min);\n}\n\nvar startGame = function () {\n    algorithm1 = new Function(\"messages\", \"my_x\", \"my_y\", \"my_hitpoints\", \"my_inner_info\", \"microbe_move\", \"microbe_reproduce\", \"microbe_yell\", \"microbe_set_inner_info\", $('#player1 *[name=\"algorithm\"]').val());\n    algorithm2 = new Function(\"messages\", \"my_x\", \"my_y\", \"my_hitpoints\", \"my_inner_info\", \"microbe_move\", \"microbe_reproduce\", \"microbe_yell\", \"microbe_set_inner_info\", $('#player2 *[name=\"algorithm\"]').val());\n    var player1 = new Player($('#player1 *[name=\"nickname\"]').val(), $('#player1 *[name=\"color\"]').val(), algorithm1);\n    var player2 = new Player($('#player2 *[name=\"nickname\"]').val(), $('#player2 *[name=\"color\"]').val(), algorithm2);\n    var players = [player1, player2];\n    var game_configs = {\n        'max_steps': 9999999999,\n        'microbes_starting_population': 1,\n        'food_starting_population': 200,\n    };\n    var env_configs = {\n        'maxX': 200,\n        'maxY': 200,\n        'minX': 0,\n        'minY': 0,\n        'population_limit': 500,\n        'draw_scale': 3,\n        'hitpoints_per_food': 1000,\n        'message_radius': 2,\n    };\n    var game = new Game(players, game_configs, env_configs);\n    game.settle();\n    setInterval(function() {\n        if (!game.processEnd()) {\n            // TODO: do it without env middleware?\n            game.env.step();\n            game.env.draw();\n        }\n    }, 41);\n};\n\n\n\n\n\n// Create players.\nvar algorithm1 = function (messages, my_x, my_y, my_hitpoints, microbe_move, microbe_reproduce, microbe_yell, microbe_set_inner_info) {\n    // 1. Parse message.\n    var found_food = false;\n    for (var i = 0; i < messages.length; i++) {\n        try {\n            var data = JSON.parse(messages[i].text);\n            if (data.type === 'food') {\n                // Go to this food.\n                microbe_move(data.x - my_x, data.y - my_y);\n                found_food = true;\n                break;\n            }\n        } catch (e) {}\n    }\n    if (!found_food) {\n        var move_x = randomNumberFromRange(-1, 2);\n        var move_y = randomNumberFromRange(-1, 2);\n        microbe_move(move_x, move_y);\n        microbe_move(move_x, move_y);\n    }\n    if (Math.random() <= 0.005) {\n        microbe_reproduce();\n    }\n    // That's how microbe can give message to teammate microbes in radius=2 in any text format.\n    // microbe_yell('asd');\n};\nvar algorithm2 = function (messages, my_x, my_y, my_hitpoints, microbe_move, microbe_reproduce, microbe_yell, microbe_set_inner_info) {\n    var move_x = randomNumberFromRange(-1, 2);\n    var move_y = randomNumberFromRange(-1, 2);\n    microbe_move(move_x, move_y);\n    if (Math.random() <= 0.005) {\n        microbe_reproduce();\n    }\n};","/**\r\n * Environment constructor.\r\n * @param configs\r\n *  {\r\n        'maxX': 200,\r\n        'maxY': 200,\r\n        'minX': 0,\r\n        'minY': 0,\r\n        'population_limit': 500,\r\n        'draw_scale': 3,\r\n        'hitpoints_per_food': 1000,\r\n        'message_radius': 2,\r\n    };\r\n * @constructor\r\n */\r\nvar Environment = function (configs) {\r\n    this.configs = configs;\r\n    this.current_step = 0;\r\n    // Reproduce query.\r\n    this.microbes_to_reproduce = [];\r\n    // Initialize environment array.\r\n    this.microbes = [];\r\n    this.messages = [];\r\n    this.food = [];\r\n    this.env = {};\r\n    for (i = this.configs.minX; i <= this.configs.maxX; i++) {\r\n        this.env[i] = {};\r\n        for (j = this.configs.minY; j <= this.configs.maxY; j++) {\r\n            this.env[i][j] = {\r\n                'microbes': [],\r\n                'messages': [],\r\n                'food': []\r\n            };\r\n        }\r\n    }\r\n    // Initialize canvas size.\r\n    var c = document.getElementById(\"Area\");\r\n    var ctx = c.getContext(\"2d\");\r\n    ctx.canvas.height = (this.configs.maxY - this.configs.minY)*this.configs.draw_scale;\r\n    ctx.canvas.width = (this.configs.maxX - this.configs.minX)*this.configs.draw_scale;\r\n};\r\n\r\n/**\r\n * Draw environment.\r\n */\r\nEnvironment.prototype.draw = function() {\r\n    var c = document.getElementById(\"Area\");\r\n    var ctx = c.getContext(\"2d\");\r\n\r\n    var scale = this.configs.draw_scale;\r\n    ctx.clearRect(0, 0, this.configs.maxX * scale, this.configs.maxY * scale);\r\n    for (var x in this.env) {\r\n        for (var y in this.env[x]) {\r\n            if (this.env[x][y].microbes.length > 0) {\r\n                ctx.fillStyle = this.env[x][y].microbes[0].player.color;\r\n                ctx.fillRect(x * scale, y * scale, scale, scale);\r\n            }\r\n            if (this.env[x][y].food.length > 0) {\r\n                ctx.fillStyle = 'green';\r\n                ctx.fillRect(x * scale, y * scale, scale, scale);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Process a step in environment.\r\n */\r\nEnvironment.prototype.step = function() {\r\n    // Generate env messages. Each object on env layer should \"introduce\" itself.\r\n    this.prepareEnvironmentInfo();\r\n    // .. and only now increase step.\r\n    this.current_step++;\r\n    for (var index in this.microbes) {\r\n        this.microbes[index].live();\r\n    }\r\n    for (var index in this.food) {\r\n        this.food[index].live();\r\n    }\r\n    // Reproduce microbes.\r\n    while (this.microbes_to_reproduce.length > 0) {\r\n        var microbe = this.microbes_to_reproduce[0];\r\n        var index = this.microbes.indexOf(microbe);\r\n        this.microbes_to_reproduce.splice(0, 1);\r\n        // If this microbe found we can proceed.\r\n        // As we processLayerItem later (e.g. kill microbes) we should not have index = -1. But anyway.\r\n        if (index !== -1) {\r\n            this.microbes[index].reproduce();\r\n        } else {\r\n            console.log('Trying to reproduce microbe which doesnt exist any more.');\r\n        }\r\n    }\r\n    // \"Process\" environment.\r\n    for (var i in this.env) {\r\n        for (var j in this.env[i]) {\r\n            // Process layer item.\r\n            this.processLayerItem(this.env[i][j]);\r\n        }\r\n    }\r\n    // Remove old messages.\r\n    var i = 0;\r\n    while (i < this.messages.length) {\r\n        if (this.messages[i].step < this.current_step) {\r\n            var index = this.env[this.messages[i].x][this.messages[i].y].messages.indexOf(this.messages[i]);\r\n            this.env[this.messages[i].x][this.messages[i].y].messages.splice(index, 1);\r\n            this.messages.splice(i, 1);\r\n        } else {\r\n            // Nothing was deleted, we can proceed to next array element.\r\n            i++;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Process layer item.\r\n */\r\nEnvironment.prototype.processLayerItem = function(item) {\r\n    // Microbe 'battle'.\r\n    if (item.microbes.length > 1) {\r\n        var players_and_hitpoints = this.getOverallHitpointsByPlayer(item.microbes);\r\n        var players = players_and_hitpoints.players;\r\n        var hitpoints = players_and_hitpoints.hitpoints;\r\n        // Players microbe battle.\r\n        if (players.length > 1) {\r\n            // Get index of max element in hitpoints;\r\n            var max_hitpoints_index = 0;\r\n            for (var i = 1; i < hitpoints.length; i++) {\r\n                if (hitpoints[i] > hitpoints[max_hitpoints_index]) {\r\n                    max_hitpoints_index = i;\r\n                }\r\n            }\r\n            var winner = players[max_hitpoints_index];\r\n            // Even if value is the same the winner will be pseudo-random - you never know which microbe goes first in the layer.\r\n            for (var i = 0; i < item.microbes.length; i++) {\r\n                if (item.microbes[i].player !== winner) {\r\n                    // Dying will be calculated further.\r\n                    item.microbes[i].hitpoints = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Kill microbes with no hitpoints.\r\n    var i = 0;\r\n    while (i < item.microbes.length) {\r\n        // Decrease hitpoints at first.\r\n        item.microbes[i].hitpoints -= 41;\r\n        if (item.microbes[i].hitpoints <= 0) {\r\n            var index = this.microbes.indexOf(item.microbes[i]);\r\n            this.microbes.splice(index, 1);\r\n            item.microbes.splice(i, 1);\r\n        } else {\r\n            // We can proceed to the next element in array.\r\n            i++;\r\n        }\r\n    }\r\n    // Eat. That's better to do it after battle and dying to not resurrect dead microbe.\r\n    // That's easy. Each microbe which stays on food can eat it.\r\n    if (item.food.length > 0 && item.microbes.length > 0) {\r\n        // Each microbe eats the first available food.\r\n        for (var i = 0; i < item.microbes.length; i++) {\r\n            for (var j = 0; j < item.food.length; j++) {\r\n                if (item.food[j].height <= 0) {\r\n                    // Do not feed from empty food.\r\n                    continue;\r\n                } else {\r\n                    // Feed. We will delete eaten food later.\r\n                    item.food[j].height--;\r\n                    item.microbes[i].hitpoints += Math.round(this.configs.hitpoints_per_food);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Food dies.\r\n    var i = 0;\r\n    while (i < item.food.length) {\r\n        if (item.food[i].height <= 0) {\r\n            var index = this.food.indexOf(item.food[i]);\r\n            this.food.splice(index, 1);\r\n            item.food.splice(i, 1);\r\n        } else {\r\n            // Proceed to next food element in array.\r\n            i++;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Returns messages array which available in (x, y) position.\r\n * @param x\r\n * @param y\r\n */\r\nEnvironment.prototype.getMessages = function (x, y) {\r\n    var response = [];\r\n    for (var i = x - this.configs.message_radius; i <= x + this.configs.message_radius; i++) {\r\n        if ((this.configs.minX <= i) && (i <= this.configs.maxX)) {\r\n            for (var j = y - this.configs.message_radius; j <= y + this.configs.message_radius; j++) {\r\n                if ((this.configs.minY <= j) && (j <= this.configs.maxY)) {\r\n                    for (var index = 0; index < this.env[i][j].messages.length; index++) {\r\n                        // If message was not created on current step.\r\n                        if (this.env[i][j].messages[index].step < this.current_step) {\r\n                            if (response.indexOf(this.env[i][j].messages[index]) === -1) {\r\n                                response.push(this.env[i][j].messages[index]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return response;\r\n};\r\n\r\n/**\r\n * Asks for each object in environment and puts it's info message into appropriate place.\r\n */\r\nEnvironment.prototype.prepareEnvironmentInfo = function () {\r\n    for (var i = this.configs.minX; i <= this.configs.maxX; i++) {\r\n        for (var j = this.configs.minY; j <= this.configs.maxY; j++) {\r\n            // Microbes general info.\r\n            for (var k = 0; k < this.env[i][j].microbes.length; k++) {\r\n                var message = new Message(this.env[i][j].microbes[k].giveEnvironmentInfo(), i, j, this, null);\r\n                this.messages.push(message);\r\n                this.env[i][j].messages.push(message);\r\n            }\r\n            // Food general info.\r\n            for (var k = 0; k < this.env[i][j].food.length; k++) {\r\n                var message = new Message(this.env[i][j].food[k].giveEnvironmentInfo(), i, j, this, null);\r\n                this.messages.push(message);\r\n                this.env[i][j].messages.push(message);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n/*************************************************************\r\n * Help functions.\r\n *************************************************************/\r\n/**\r\n * Get overall microbes hitpoints by player from some obj.\r\n * Respond with {'players': [], 'hitpoints': []};\r\n * @param microbes - microbes array.\r\n */\r\nEnvironment.prototype.getOverallHitpointsByPlayer = function (microbes) {\r\n    var players = [];\r\n    var hitpoints_by_player = [];\r\n    for (var i = 0; i < microbes.length; i++) {\r\n        var player_index = players.indexOf(microbes[i].player);\r\n        // If that was new player we should push it into array and set it's index manually.\r\n        if (player_index === -1) {\r\n            players.push(microbes[i].player);\r\n            player_index = players.length - 1;\r\n            // Set new index to 0.\r\n            hitpoints_by_player[player_index] = 0;\r\n        }\r\n        hitpoints_by_player[player_index] += microbes[i].hitpoints;\r\n    }\r\n    return {\r\n        'players': players,\r\n        'hitpoints': hitpoints_by_player\r\n    };\r\n};\r\n\r\n/**\r\n * Get microbes quantity by player.\r\n */\r\nEnvironment.prototype.getMicrobesQuantityByPlayer = function (player, microbes) {\r\n    var q = 0;\r\n    for (var i = 0; i < microbes.length; i++) {\r\n        if (microbes[i].player === player) {\r\n            q++;\r\n        }\r\n    }\r\n    return q;\r\n};","/**\r\n * Game constructor.\r\n * @param players\r\n * @param game_configs\r\n *  {\r\n        'max_steps': 9999999999,\r\n        'microbes_starting_population': 1,\r\n        'food_starting_population': 200,\r\n    };\r\n @param env_configs\r\n    see Environment configs.\r\n */\r\nvar Game = function (players, game_configs, env_configs) {\r\n    this.configs = game_configs;\r\n    this.env = new Environment(env_configs);\r\n    this.players = players;\r\n    this.status = 'prepare';\r\n    this.winner = null;\r\n};\r\n\r\n/**\r\n * Initialize game.\r\n */\r\nGame.prototype.settle = function() {\r\n    randomSettle.call(this);\r\n};\r\n\r\n/**\r\n * If game should be ended or not.\r\n * Returns true if game ends.\r\n */\r\nGame.prototype.processEnd = function() {\r\n    if (this.status === 'results') {\r\n        return true;\r\n    }\r\n    if (this.status === 'ended') {\r\n        this.endGame();\r\n        this.status = 'results';\r\n        return true;\r\n    }\r\n    // 0. Nobody wins.\r\n    if (this.env.microbes.length === 0) {\r\n        this.winner = null;\r\n        this.status = 'ended';\r\n        return true;\r\n    }\r\n    // 1. Only one player left.\r\n    var only_one_player_left = true;\r\n    var current_player = null;\r\n    for (var i = 0; i < this.env.microbes.length; i++) {\r\n        // First step - just set player.\r\n        if (current_player === null) {\r\n            current_player = this.env.microbes[i].player;\r\n\r\n        }\r\n        // Proceed until different player detected.\r\n        if (current_player !== this.env.microbes[i].player) {\r\n            only_one_player_left = false;\r\n            break;\r\n        }\r\n    }\r\n    if (only_one_player_left) {\r\n        this.winner = this.env.microbes[0].player;\r\n        this.status = 'ended';\r\n        return true;\r\n    }\r\n    // 2. Maximum steps.\r\n    if (this.env.current_step >= this.configs.max_steps) {\r\n        // Collect different players.\r\n        var players_and_hitpoints = this.getOverallHitpointsByPlayer(this.env.microbes);\r\n        var players = players_and_hitpoints.players;\r\n        var hitpoints = players_and_hitpoints.hitpoints;\r\n        // Players microbe battle.\r\n        if (players.length > 1) {\r\n            // Get index of max element in hitpoints;\r\n            var max_hitpoints_index = 0;\r\n            for (var i = 1; i < hitpoints.length; i++) {\r\n                if (hitpoints[i] > hitpoints[max_hitpoints_index]) {\r\n                    max_hitpoints_index = i;\r\n                }\r\n            }\r\n            this.winner = players[max_hitpoints_index];\r\n            this.status = 'ended';\r\n            return true;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Emd game action.\r\n */\r\nGame.prototype.endGame = function() {\r\n    var text = \"\";\r\n    if (this.winner !== null) {\r\n        text = this.winner.nickname + \" wins!\";\r\n    } else {\r\n        text = \"Game ended in a draw.\";\r\n    }\r\n    $(\"#result\").html(text);\r\n};\r\n\r\n\r\n\r\n/*************************************************************\r\n * Help functions.\r\n *************************************************************/\r\n/**\r\n * Randomly places player microbes.\r\n */\r\nvar randomSettle = function () {\r\n    // Start coords depends on player quantity.\r\n    // TODO: depends on map size.\r\n    var coords = [];\r\n    switch (this.players.length) {\r\n        default:\r\n        case 2:\r\n            coords = [\r\n                {\r\n                    'x': this.env.configs.minX,\r\n                    'y': Math.round(this.env.configs.maxY/2)\r\n                }, {\r\n                    'x': this.env.configs.maxX,\r\n                    'y': Math.round(this.env.configs.maxY/2)\r\n                }\r\n            ];\r\n            break;\r\n    }\r\n    for (var i = 0; i < this.configs.microbes_starting_population; i++) {\r\n        for (var p = 0; p < this.players.length; p++) {\r\n            new Microbe(coords[p].x, coords[p].y, this.env, 9999999, this.players[p], '');\r\n        }\r\n        for (var f = 0; f < this.configs.food_starting_population; f++) {\r\n            var x = randomNumberFromRange(this.env.configs.minX, this.env.configs.maxX);\r\n            var y = randomNumberFromRange(this.env.configs.minY, this.env.configs.maxY);\r\n            new Food(x, y, this.env);\r\n        }\r\n    }\r\n};","/**\r\n * Message constructor.\r\n * @param x\r\n * @param y\r\n * @param env\r\n * @constructor\r\n */\r\nvar Message = function (text, x, y, env, player) {\r\n    // Message source. Could be null.\r\n    this.x = x;\r\n    this.y = y;\r\n    // Message could belong to some player.\r\n    this.player = player;\r\n    this.step = env.current_step;\r\n    this.text = text;\r\n};\r\n","/**\r\n * Microbe constructor.\r\n * @param x\r\n * @param y\r\n * @param env\r\n * @constructor\r\n */\r\nvar Microbe = function (x, y, env, hitpoints, player, inner_info) {\r\n    this.player = player;\r\n    this.env = env;\r\n    this.speed = 1;\r\n    this.hitpoints = hitpoints;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.env.microbes.push(this);\r\n    this.env.env[this.x][this.y].microbes.push(this);\r\n    if (inner_info === undefined) {\r\n        inner_info = '';\r\n    }\r\n    this.inner_info = inner_info;\r\n};\r\n\r\n/**\r\n * Main microbe method which calculates a step of microbe's life.\r\n */\r\nMicrobe.prototype.live = function() {\r\n    if (this.player && this.player instanceof Player) {\r\n        var that = this;\r\n        // Secure operation to not allow player use the entire microbe object in algorithm.\r\n        var already_moved = false;\r\n        var microbe_move = function (move_x, move_y) {\r\n            if (already_moved === false) {\r\n                already_moved = true;\r\n                that.move(move_x, move_y);\r\n            } else {\r\n                //console.log(that.player.nickname + ': Move already being used on this step.')\r\n            }\r\n        };\r\n        var already_reproduce_requested = false;\r\n        var microbe_reproduce_request = function () {\r\n            if (already_reproduce_requested === false) {\r\n                already_reproduce_requested = true;\r\n                that.reproduce_request();\r\n            } else {\r\n                //console.log(that.player.nickname + ': Reproduce request already being used on this step.')\r\n            }\r\n        };\r\n        var already_yelled = false;\r\n        var microbe_yell = function (text) {\r\n            if (already_yelled === false) {\r\n                already_yelled = true;\r\n                that.yell(text);\r\n            } else {\r\n                //console.log(that.player.nickname + ': Yell already being used on this step.')\r\n            }\r\n        };\r\n        // Set inner_info.\r\n        var microbe_set_inner_info = function (inner_info) {\r\n            that.setInnerInfo(inner_info);\r\n        };\r\n        // Get messages.\r\n        var messages = this.env.getMessages(this.x, this.y);\r\n        this.player.algorithm.call(null, messages, this.x, this.y, this.hitpoints, this.inner_info, microbe_move, microbe_reproduce_request, microbe_yell, microbe_set_inner_info);\r\n    }\r\n};\r\n\r\n/**\r\n * Move microbe in environment.\r\n */\r\nMicrobe.prototype.move = function(move_x, move_y) {\r\n    // Convert non-number values into zero.\r\n    if (!$.isNumeric(move_x)) {\r\n        move_x = 0;\r\n    }\r\n    if (!$.isNumeric(move_y)) {\r\n        move_y = 0;\r\n    }\r\n    // Round values if non-integers being provided.\r\n    move_x = Math.round(move_x);\r\n    move_y = Math.round(move_y);\r\n    // Check if are going to move.\r\n    if (move_x === 0 && move_y === 0) {\r\n        return;\r\n    }\r\n    // Normalisation.\r\n    if (Math.abs(move_x) > 1) {\r\n        move_x = Math.sign(move_x);\r\n    }\r\n    if (Math.abs(move_y) > 1) {\r\n        move_y = Math.sign(move_y);\r\n    }\r\n    // Pop the microbe from its environment cell.\r\n    var index = this.env.env[this.x][this.y].microbes.indexOf(this);\r\n    this.env.env[this.x][this.y].microbes.splice(index, 1);\r\n\r\n    // Move microbe.\r\n    this.x += this.speed * move_x;\r\n    this.y += this.speed * move_y;\r\n    // Check for out of bounds scenario.\r\n    if (this.x < this.env.configs.minX) {\r\n        this.x = this.env.configs.minX;\r\n    }\r\n    else if (this.x >= this.env.configs.maxX) {\r\n        this.x = this.env.configs.maxX - 1;\r\n    }\r\n    if (this.y < this.env.configs.minY) {\r\n        this.y = this.env.configs.minY;\r\n    }\r\n    else if (this.y >= this.env.configs.maxY) {\r\n        this.y = this.env.configs.maxY - 1;\r\n    }\r\n\r\n    // Put the microbe into the environment cell.\r\n    this.env.env[this.x][this.y].microbes.push(this);\r\n};\r\n\r\n/**\r\n * Microbe 'asks' environment to reproduce himself.\r\n * In fact that happens after all microbes 'live' to not let players abuse continuous microbes creation.\r\n */\r\nMicrobe.prototype.reproduce_request = function() {\r\n    if (this.env.microbes_to_reproduce.indexOf(this) === -1) {\r\n        this.env.microbes_to_reproduce.push(this);\r\n    }\r\n};\r\n\r\n/**\r\n * Microbe creates a new one at the same position as itself.\r\n */\r\nMicrobe.prototype.reproduce = function() {\r\n    if (this.env.getMicrobesQuantityByPlayer(this.player, this.env.microbes) <= this.env.configs.population_limit) {\r\n        this.hitpoints = Math.round(this.hitpoints / 2);\r\n        new Microbe(this.x, this.y, this.env, this.hitpoints, this.player, '');\r\n    }\r\n};\r\n\r\n/**\r\n * Microbe yells some message.\r\n */\r\nMicrobe.prototype.yell = function(text) {\r\n    // Create message.\r\n    var message = new Message(text, this.x, this.y, this.env, this.player);\r\n    this.env.messages.push(message);\r\n    this.env.env[this.x][this.y].messages.push(message);\r\n};\r\n\r\n/**\r\n * Provide environment with info about this object.\r\n */\r\nMicrobe.prototype.giveEnvironmentInfo = function() {\r\n    var text = {\r\n        'x': this.x,\r\n        'y': this.y,\r\n        'player': this.player.nickname,\r\n        'type': 'microbe',\r\n        'hitpoints': this.hitpoints,\r\n        'inner_info': this.inner_info\r\n    };\r\n    return JSON.stringify(text);\r\n};\r\n\r\n/**\r\n * Sets inner info.\r\n */\r\nMicrobe.prototype.setInnerInfo = function(inner_info) {\r\n    this.inner_info = inner_info;\r\n};\r\n","/**\r\n * Player constructor.\r\n * @param x\r\n * @param y\r\n * @constructor\r\n */\r\nvar Player = function (nickname, color, algorithm) {\r\n    this.nickname = nickname;\r\n    this.color = color;\r\n    var that = this;\r\n    // TODO:\r\n    this.algorithm = algorithm || function (messages, my_x, my_y, my_hitpoints, my_inner_info, microbe_move, microbe_reproduce, microbe_yell, microbe_set_inner_info) {\r\n        // 1. Parse message.\r\n        var found_food = false;\r\n        for (var i = 0; i < messages.length; i++) {\r\n            try {\r\n                var data = JSON.parse(messages[i].text);\r\n                if (data.type === 'food') {\r\n                    // Go to this food.\r\n                    microbe_move(data.x - my_x, data.y - my_y);\r\n                    found_food = true;\r\n                    break;\r\n                }\r\n            } catch (e) {}\r\n        }\r\n        if (!found_food) {\r\n            var move_x = randomNumberFromRange(-1, 2);\r\n            var move_y = randomNumberFromRange(-1, 2);\r\n            microbe_move(move_x, move_y);\r\n        }\r\n        // FIXME: move once per step!!!\r\n        microbe_reproduce();\r\n        microbe_yell(that.nickname);\r\n    };\r\n};"]}